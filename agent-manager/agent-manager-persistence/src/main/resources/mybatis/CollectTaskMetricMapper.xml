<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.didichuxing.datachannel.agentmanager.persistence.mysql.CollectTaskMetricMapper" >
  <resultMap id="BaseResultMap" type="com.didichuxing.datachannel.agentmanager.common.bean.po.logcollecttask.CollectTaskMetricPO" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="read_time_mean" property="readTimeMean" jdbcType="INTEGER" />
    <result column="filter_remained" property="filterRemained" jdbcType="INTEGER" />
    <result column="channel_capacity" property="channelCapacity" jdbcType="VARCHAR" />
    <result column="is_file_exist" property="isFileExist" jdbcType="BIT" />
    <result column="path_id" property="pathId" jdbcType="BIGINT" />
    <result column="type" property="type" jdbcType="VARCHAR" />
    <result column="read_count" property="readCount" jdbcType="INTEGER" />
    <result column="send_time_mean" property="sendTimeMean" jdbcType="INTEGER" />
    <result column="master_file" property="masterFile" jdbcType="VARCHAR" />
    <result column="path" property="path" jdbcType="VARCHAR" />
    <result column="hostname" property="hostname" jdbcType="VARCHAR" />
    <result column="heartbeat_time" property="heartbeatTime" jdbcType="BIGINT" />
    <result column="host_ip" property="hostIp" jdbcType="VARCHAR" />
    <result column="sink_num" property="sinkNum" jdbcType="INTEGER" />
    <result column="flush_time_mean" property="flushTimeMean" jdbcType="INTEGER" />
    <result column="latest_file" property="latestFile" jdbcType="VARCHAR" />
    <result column="filter_too_large_count" property="filterTooLargeCount" jdbcType="INTEGER" />
    <result column="channel_type" property="channelType" jdbcType="VARCHAR" />
    <result column="log_model_version" property="logModelVersion" jdbcType="INTEGER" />
    <result column="topic" property="topic" jdbcType="VARCHAR" />
    <result column="flush_count" property="flushCount" jdbcType="INTEGER" />
    <result column="flush_time_max" property="flushTimeMax" jdbcType="INTEGER" />
    <result column="filter_out" property="filterOut" jdbcType="INTEGER" />
    <result column="related_files" property="relatedFiles" jdbcType="INTEGER" />
    <result column="log_model_host_name" property="logModelHostName" jdbcType="VARCHAR" />
    <result column="cluster_id" property="clusterId" jdbcType="BIGINT" />
    <result column="limit_rate" property="limitRate" jdbcType="INTEGER" />
    <result column="control_time_mean" property="controlTimeMean" jdbcType="BIGINT" />
    <result column="limit_time" property="limitTime" jdbcType="INTEGER" />
    <result column="log_mode_id" property="logModeId" jdbcType="BIGINT" />
    <result column="flush_time_min" property="flushTimeMin" jdbcType="INTEGER" />
    <result column="read_time_min" property="readTimeMin" jdbcType="INTEGER" />
    <result column="send_time_max" property="sendTimeMax" jdbcType="INTEGER" />
    <result column="dynamic_limiter" property="dynamicLimiter" jdbcType="INTEGER" />
    <result column="log_path_key" property="logPathKey" jdbcType="VARCHAR" />
    <result column="max_time_gap" property="maxTimeGap" jdbcType="INTEGER" />
    <result column="send_byte" property="sendByte" jdbcType="INTEGER" />
    <result column="send_time_min" property="sendTimeMin" jdbcType="INTEGER" />
    <result column="log_time_str" property="logTimeStr" jdbcType="VARCHAR" />
    <result column="control_time_max" property="controlTimeMax" jdbcType="BIGINT" />
    <result column="send_count" property="sendCount" jdbcType="INTEGER" />
    <result column="source_type" property="sourceType" jdbcType="VARCHAR" />
    <result column="log_time" property="logTime" jdbcType="TIMESTAMP" />
    <result column="flush_failed_count" property="flushFailedCount" jdbcType="INTEGER" />
    <result column="channel_size" property="channelSize" jdbcType="INTEGER" />
    <result column="filter_total_too_large_count" property="filterTotalTooLargeCount" jdbcType="INTEGER" />
    <result column="collect_files" property="collectFiles" jdbcType="VARCHAR" />
    <result column="control_time_min" property="controlTimeMin" jdbcType="BIGINT" />
    <result column="read_byte" property="readByte" jdbcType="INTEGER" />
    <result column="read_time_max" property="readTimeMax" jdbcType="INTEGER" />
    <result column="valid_time_config" property="validTimeConfig" jdbcType="BIT" />
    <result column="operator" property="operator" jdbcType="VARCHAR" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="modify_time" property="modifyTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, read_time_mean, filter_remained, channel_capacity, is_file_exist, path_id, type,
    read_count, send_time_mean, master_file, path, hostname, heartbeat_time, host_ip,
    sink_num, flush_time_mean, latest_file, filter_too_large_count, channel_type, log_model_version,
    topic, flush_count, flush_time_max, filter_out, related_files, log_model_host_name,
    cluster_id, limit_rate, control_time_mean, limit_time, log_mode_id, flush_time_min,
    read_time_min, send_time_max, dynamic_limiter, log_path_key, max_time_gap, send_byte,
    send_time_min, log_time_str, control_time_max, send_count, source_type, log_time,
    flush_failed_count, channel_size, filter_total_too_large_count, collect_files, control_time_min,
    read_byte, read_time_max, valid_time_config, operator, create_time, modify_time
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select
    <include refid="Base_Column_List" />
    from collect_task_metric
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from collect_task_metric
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.didichuxing.datachannel.agentmanager.common.bean.po.logcollecttask.CollectTaskMetricPO" >
    insert into collect_task_metric (id, read_time_mean, filter_remained,
      channel_capacity, is_file_exist, path_id,
      type, read_count, send_time_mean,
      master_file, path, hostname,
      heartbeat_time, host_ip, sink_num,
      flush_time_mean, latest_file, filter_too_large_count,
      channel_type, log_model_version, topic,
      flush_count, flush_time_max, filter_out,
      related_files, log_model_host_name, cluster_id,
      limit_rate, control_time_mean, limit_time,
      log_mode_id, flush_time_min, read_time_min,
      send_time_max, dynamic_limiter, log_path_key,
      max_time_gap, send_byte, send_time_min,
      log_time_str, control_time_max, send_count,
      source_type, log_time, flush_failed_count,
      channel_size, filter_total_too_large_count,
      collect_files, control_time_min, read_byte,
      read_time_max, valid_time_config, operator, create_time,
      modify_time)
    values (#{id,jdbcType=BIGINT}, #{readTimeMean,jdbcType=INTEGER}, #{filterRemained,jdbcType=INTEGER},
      #{channelCapacity,jdbcType=VARCHAR}, #{isFileExist,jdbcType=BIT}, #{pathId,jdbcType=BIGINT},
      #{type,jdbcType=VARCHAR}, #{readCount,jdbcType=INTEGER}, #{sendTimeMean,jdbcType=INTEGER},
      #{masterFile,jdbcType=VARCHAR}, #{path,jdbcType=VARCHAR}, #{hostname,jdbcType=VARCHAR},
      #{heartbeatTime,jdbcType=BIGINT}, #{hostIp,jdbcType=VARCHAR}, #{sinkNum,jdbcType=INTEGER},
      #{flushTimeMean,jdbcType=INTEGER}, #{latestFile,jdbcType=VARCHAR}, #{filterTooLargeCount,jdbcType=INTEGER},
      #{channelType,jdbcType=VARCHAR}, #{logModelVersion,jdbcType=INTEGER}, #{topic,jdbcType=VARCHAR},
      #{flushCount,jdbcType=INTEGER}, #{flushTimeMax,jdbcType=INTEGER}, #{filterOut,jdbcType=INTEGER},
      #{relatedFiles,jdbcType=INTEGER}, #{logModelHostName,jdbcType=VARCHAR}, #{clusterId,jdbcType=BIGINT},
      #{limitRate,jdbcType=INTEGER}, #{controlTimeMean,jdbcType=BIGINT}, #{limitTime,jdbcType=INTEGER},
      #{logModeId,jdbcType=BIGINT}, #{flushTimeMin,jdbcType=INTEGER}, #{readTimeMin,jdbcType=INTEGER},
      #{sendTimeMax,jdbcType=INTEGER}, #{dynamicLimiter,jdbcType=INTEGER}, #{logPathKey,jdbcType=VARCHAR},
      #{maxTimeGap,jdbcType=INTEGER}, #{sendByte,jdbcType=INTEGER}, #{sendTimeMin,jdbcType=INTEGER},
      #{logTimeStr,jdbcType=VARCHAR}, #{controlTimeMax,jdbcType=BIGINT}, #{sendCount,jdbcType=INTEGER},
      #{sourceType,jdbcType=VARCHAR}, #{logTime,jdbcType=TIMESTAMP}, #{flushFailedCount,jdbcType=INTEGER},
      #{channelSize,jdbcType=INTEGER}, #{filterTotalTooLargeCount,jdbcType=INTEGER},
      #{collectFiles,jdbcType=VARCHAR}, #{controlTimeMin,jdbcType=BIGINT}, #{readByte,jdbcType=INTEGER},
      #{readTimeMax,jdbcType=INTEGER}, #{validTimeConfig,jdbcType=BIT}, #{operator,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP},
      #{modifyTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.didichuxing.datachannel.agentmanager.common.bean.po.logcollecttask.CollectTaskMetricPO" >
    insert into collect_task_metric
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="readTimeMean != null" >
        read_time_mean,
      </if>
      <if test="filterRemained != null" >
        filter_remained,
      </if>
      <if test="channelCapacity != null" >
        channel_capacity,
      </if>
      <if test="isFileExist != null" >
        is_file_exist,
      </if>
      <if test="pathId != null" >
        path_id,
      </if>
      <if test="type != null" >
        type,
      </if>
      <if test="readCount != null" >
        read_count,
      </if>
      <if test="sendTimeMean != null" >
        send_time_mean,
      </if>
      <if test="masterFile != null" >
        master_file,
      </if>
      <if test="path != null" >
        path,
      </if>
      <if test="hostname != null" >
        hostname,
      </if>
      <if test="heartbeatTime != null" >
        heartbeat_time,
      </if>
      <if test="hostIp != null" >
        host_ip,
      </if>
      <if test="sinkNum != null" >
        sink_num,
      </if>
      <if test="flushTimeMean != null" >
        flush_time_mean,
      </if>
      <if test="latestFile != null" >
        latest_file,
      </if>
      <if test="filterTooLargeCount != null" >
        filter_too_large_count,
      </if>
      <if test="channelType != null" >
        channel_type,
      </if>
      <if test="logModelVersion != null" >
        log_model_version,
      </if>
      <if test="topic != null" >
        topic,
      </if>
      <if test="flushCount != null" >
        flush_count,
      </if>
      <if test="flushTimeMax != null" >
        flush_time_max,
      </if>
      <if test="filterOut != null" >
        filter_out,
      </if>
      <if test="relatedFiles != null" >
        related_files,
      </if>
      <if test="logModelHostName != null" >
        log_model_host_name,
      </if>
      <if test="clusterId != null" >
        cluster_id,
      </if>
      <if test="limitRate != null" >
        limit_rate,
      </if>
      <if test="controlTimeMean != null" >
        control_time_mean,
      </if>
      <if test="limitTime != null" >
        limit_time,
      </if>
      <if test="logModeId != null" >
        log_mode_id,
      </if>
      <if test="flushTimeMin != null" >
        flush_time_min,
      </if>
      <if test="readTimeMin != null" >
        read_time_min,
      </if>
      <if test="sendTimeMax != null" >
        send_time_max,
      </if>
      <if test="dynamicLimiter != null" >
        dynamic_limiter,
      </if>
      <if test="logPathKey != null" >
        log_path_key,
      </if>
      <if test="maxTimeGap != null" >
        max_time_gap,
      </if>
      <if test="sendByte != null" >
        send_byte,
      </if>
      <if test="sendTimeMin != null" >
        send_time_min,
      </if>
      <if test="logTimeStr != null" >
        log_time_str,
      </if>
      <if test="controlTimeMax != null" >
        control_time_max,
      </if>
      <if test="sendCount != null" >
        send_count,
      </if>
      <if test="sourceType != null" >
        source_type,
      </if>
      <if test="logTime != null" >
        log_time,
      </if>
      <if test="flushFailedCount != null" >
        flush_failed_count,
      </if>
      <if test="channelSize != null" >
        channel_size,
      </if>
      <if test="filterTotalTooLargeCount != null" >
        filter_total_too_large_count,
      </if>
      <if test="collectFiles != null" >
        collect_files,
      </if>
      <if test="controlTimeMin != null" >
        control_time_min,
      </if>
      <if test="readByte != null" >
        read_byte,
      </if>
      <if test="readTimeMax != null" >
        read_time_max,
      </if>
      <if test="validTimeConfig != null" >
        valid_time_config,
      </if>
      <if test="operator != null" >
        operator,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="modifyTime != null" >
        modify_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=BIGINT},
      </if>
      <if test="readTimeMean != null" >
        #{readTimeMean,jdbcType=INTEGER},
      </if>
      <if test="filterRemained != null" >
        #{filterRemained,jdbcType=INTEGER},
      </if>
      <if test="channelCapacity != null" >
        #{channelCapacity,jdbcType=VARCHAR},
      </if>
      <if test="isFileExist != null" >
        #{isFileExist,jdbcType=BIT},
      </if>
      <if test="pathId != null" >
        #{pathId,jdbcType=BIGINT},
      </if>
      <if test="type != null" >
        #{type,jdbcType=VARCHAR},
      </if>
      <if test="readCount != null" >
        #{readCount,jdbcType=INTEGER},
      </if>
      <if test="sendTimeMean != null" >
        #{sendTimeMean,jdbcType=INTEGER},
      </if>
      <if test="masterFile != null" >
        #{masterFile,jdbcType=VARCHAR},
      </if>
      <if test="path != null" >
        #{path,jdbcType=VARCHAR},
      </if>
      <if test="hostname != null" >
        #{hostname,jdbcType=VARCHAR},
      </if>
      <if test="heartbeatTime != null" >
        #{heartbeatTime,jdbcType=BIGINT},
      </if>
      <if test="hostIp != null" >
        #{hostIp,jdbcType=VARCHAR},
      </if>
      <if test="sinkNum != null" >
        #{sinkNum,jdbcType=INTEGER},
      </if>
      <if test="flushTimeMean != null" >
        #{flushTimeMean,jdbcType=INTEGER},
      </if>
      <if test="latestFile != null" >
        #{latestFile,jdbcType=VARCHAR},
      </if>
      <if test="filterTooLargeCount != null" >
        #{filterTooLargeCount,jdbcType=INTEGER},
      </if>
      <if test="channelType != null" >
        #{channelType,jdbcType=VARCHAR},
      </if>
      <if test="logModelVersion != null" >
        #{logModelVersion,jdbcType=INTEGER},
      </if>
      <if test="topic != null" >
        #{topic,jdbcType=VARCHAR},
      </if>
      <if test="flushCount != null" >
        #{flushCount,jdbcType=INTEGER},
      </if>
      <if test="flushTimeMax != null" >
        #{flushTimeMax,jdbcType=INTEGER},
      </if>
      <if test="filterOut != null" >
        #{filterOut,jdbcType=INTEGER},
      </if>
      <if test="relatedFiles != null" >
        #{relatedFiles,jdbcType=INTEGER},
      </if>
      <if test="logModelHostName != null" >
        #{logModelHostName,jdbcType=VARCHAR},
      </if>
      <if test="clusterId != null" >
        #{clusterId,jdbcType=BIGINT},
      </if>
      <if test="limitRate != null" >
        #{limitRate,jdbcType=INTEGER},
      </if>
      <if test="controlTimeMean != null" >
        #{controlTimeMean,jdbcType=BIGINT},
      </if>
      <if test="limitTime != null" >
        #{limitTime,jdbcType=INTEGER},
      </if>
      <if test="logModeId != null" >
        #{logModeId,jdbcType=BIGINT},
      </if>
      <if test="flushTimeMin != null" >
        #{flushTimeMin,jdbcType=INTEGER},
      </if>
      <if test="readTimeMin != null" >
        #{readTimeMin,jdbcType=INTEGER},
      </if>
      <if test="sendTimeMax != null" >
        #{sendTimeMax,jdbcType=INTEGER},
      </if>
      <if test="dynamicLimiter != null" >
        #{dynamicLimiter,jdbcType=INTEGER},
      </if>
      <if test="logPathKey != null" >
        #{logPathKey,jdbcType=VARCHAR},
      </if>
      <if test="maxTimeGap != null" >
        #{maxTimeGap,jdbcType=INTEGER},
      </if>
      <if test="sendByte != null" >
        #{sendByte,jdbcType=INTEGER},
      </if>
      <if test="sendTimeMin != null" >
        #{sendTimeMin,jdbcType=INTEGER},
      </if>
      <if test="logTimeStr != null" >
        #{logTimeStr,jdbcType=VARCHAR},
      </if>
      <if test="controlTimeMax != null" >
        #{controlTimeMax,jdbcType=BIGINT},
      </if>
      <if test="sendCount != null" >
        #{sendCount,jdbcType=INTEGER},
      </if>
      <if test="sourceType != null" >
        #{sourceType,jdbcType=VARCHAR},
      </if>
      <if test="logTime != null" >
        #{logTime,jdbcType=TIMESTAMP},
      </if>
      <if test="flushFailedCount != null" >
        #{flushFailedCount,jdbcType=INTEGER},
      </if>
      <if test="channelSize != null" >
        #{channelSize,jdbcType=INTEGER},
      </if>
      <if test="filterTotalTooLargeCount != null" >
        #{filterTotalTooLargeCount,jdbcType=INTEGER},
      </if>
      <if test="collectFiles != null" >
        #{collectFiles,jdbcType=VARCHAR},
      </if>
      <if test="controlTimeMin != null" >
        #{controlTimeMin,jdbcType=BIGINT},
      </if>
      <if test="readByte != null" >
        #{readByte,jdbcType=INTEGER},
      </if>
      <if test="readTimeMax != null" >
        #{readTimeMax,jdbcType=INTEGER},
      </if>
      <if test="validTimeConfig != null" >
        #{validTimeConfig, jdbcType=BIT},
      </if>
      <if test="operator != null" >
        #{operator,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="modifyTime != null" >
        #{modifyTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.didichuxing.datachannel.agentmanager.common.bean.po.logcollecttask.CollectTaskMetricPO" >
    update collect_task_metric
    <set >
      <if test="readTimeMean != null" >
        read_time_mean = #{readTimeMean,jdbcType=INTEGER},
      </if>
      <if test="filterRemained != null" >
        filter_remained = #{filterRemained,jdbcType=INTEGER},
      </if>
      <if test="channelCapacity != null" >
        channel_capacity = #{channelCapacity,jdbcType=VARCHAR},
      </if>
      <if test="isFileExist != null" >
        is_file_exist = #{isFileExist,jdbcType=BIT},
      </if>
      <if test="pathId != null" >
        path_id = #{pathId,jdbcType=BIGINT},
      </if>
      <if test="type != null" >
        type = #{type,jdbcType=VARCHAR},
      </if>
      <if test="readCount != null" >
        read_count = #{readCount,jdbcType=INTEGER},
      </if>
      <if test="sendTimeMean != null" >
        send_time_mean = #{sendTimeMean,jdbcType=INTEGER},
      </if>
      <if test="masterFile != null" >
        master_file = #{masterFile,jdbcType=VARCHAR},
      </if>
      <if test="path != null" >
        path = #{path,jdbcType=VARCHAR},
      </if>
      <if test="hostname != null" >
        hostname = #{hostname,jdbcType=VARCHAR},
      </if>
      <if test="heartbeatTime != null" >
        heartbeat_time = #{heartbeatTime,jdbcType=BIGINT},
      </if>
      <if test="hostIp != null" >
        host_ip = #{hostIp,jdbcType=VARCHAR},
      </if>
      <if test="sinkNum != null" >
        sink_num = #{sinkNum,jdbcType=INTEGER},
      </if>
      <if test="flushTimeMean != null" >
        flush_time_mean = #{flushTimeMean,jdbcType=INTEGER},
      </if>
      <if test="latestFile != null" >
        latest_file = #{latestFile,jdbcType=VARCHAR},
      </if>
      <if test="filterTooLargeCount != null" >
        filter_too_large_count = #{filterTooLargeCount,jdbcType=INTEGER},
      </if>
      <if test="channelType != null" >
        channel_type = #{channelType,jdbcType=VARCHAR},
      </if>
      <if test="logModelVersion != null" >
        log_model_version = #{logModelVersion,jdbcType=INTEGER},
      </if>
      <if test="topic != null" >
        topic = #{topic,jdbcType=VARCHAR},
      </if>
      <if test="flushCount != null" >
        flush_count = #{flushCount,jdbcType=INTEGER},
      </if>
      <if test="flushTimeMax != null" >
        flush_time_max = #{flushTimeMax,jdbcType=INTEGER},
      </if>
      <if test="filterOut != null" >
        filter_out = #{filterOut,jdbcType=INTEGER},
      </if>
      <if test="relatedFiles != null" >
        related_files = #{relatedFiles,jdbcType=INTEGER},
      </if>
      <if test="logModelHostName != null" >
        log_model_host_name = #{logModelHostName,jdbcType=VARCHAR},
      </if>
      <if test="clusterId != null" >
        cluster_id = #{clusterId,jdbcType=BIGINT},
      </if>
      <if test="limitRate != null" >
        limit_rate = #{limitRate,jdbcType=INTEGER},
      </if>
      <if test="controlTimeMean != null" >
        control_time_mean = #{controlTimeMean,jdbcType=BIGINT},
      </if>
      <if test="limitTime != null" >
        limit_time = #{limitTime,jdbcType=INTEGER},
      </if>
      <if test="logModeId != null" >
        log_mode_id = #{logModeId,jdbcType=BIGINT},
      </if>
      <if test="flushTimeMin != null" >
        flush_time_min = #{flushTimeMin,jdbcType=INTEGER},
      </if>
      <if test="readTimeMin != null" >
        read_time_min = #{readTimeMin,jdbcType=INTEGER},
      </if>
      <if test="sendTimeMax != null" >
        send_time_max = #{sendTimeMax,jdbcType=INTEGER},
      </if>
      <if test="dynamicLimiter != null" >
        dynamic_limiter = #{dynamicLimiter,jdbcType=INTEGER},
      </if>
      <if test="logPathKey != null" >
        log_path_key = #{logPathKey,jdbcType=VARCHAR},
      </if>
      <if test="maxTimeGap != null" >
        max_time_gap = #{maxTimeGap,jdbcType=INTEGER},
      </if>
      <if test="sendByte != null" >
        send_byte = #{sendByte,jdbcType=INTEGER},
      </if>
      <if test="sendTimeMin != null" >
        send_time_min = #{sendTimeMin,jdbcType=INTEGER},
      </if>
      <if test="logTimeStr != null" >
        log_time_str = #{logTimeStr,jdbcType=VARCHAR},
      </if>
      <if test="controlTimeMax != null" >
        control_time_max = #{controlTimeMax,jdbcType=BIGINT},
      </if>
      <if test="sendCount != null" >
        send_count = #{sendCount,jdbcType=INTEGER},
      </if>
      <if test="sourceType != null" >
        source_type = #{sourceType,jdbcType=VARCHAR},
      </if>
      <if test="logTime != null" >
        log_time = #{logTime,jdbcType=TIMESTAMP},
      </if>
      <if test="flushFailedCount != null" >
        flush_failed_count = #{flushFailedCount,jdbcType=INTEGER},
      </if>
      <if test="channelSize != null" >
        channel_size = #{channelSize,jdbcType=INTEGER},
      </if>
      <if test="filterTotalTooLargeCount != null" >
        filter_total_too_large_count = #{filterTotalTooLargeCount,jdbcType=INTEGER},
      </if>
      <if test="collectFiles != null" >
        collect_files = #{collectFiles,jdbcType=VARCHAR},
      </if>
      <if test="controlTimeMin != null" >
        control_time_min = #{controlTimeMin,jdbcType=BIGINT},
      </if>
      <if test="readByte != null" >
        read_byte = #{readByte,jdbcType=INTEGER},
      </if>
      <if test="readTimeMax != null" >
        read_time_max = #{readTimeMax,jdbcType=INTEGER},
      </if>
      <if test="validTimeConfig != null" >
        valid_time_config = #{validTimeConfig, jdbcType=BIT},
      </if>
      <if test="operator != null" >
        operator = #{operator,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="modifyTime != null" >
        modify_time = #{modifyTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.didichuxing.datachannel.agentmanager.common.bean.po.logcollecttask.CollectTaskMetricPO" >
    update collect_task_metric
    set read_time_mean = #{readTimeMean,jdbcType=INTEGER},
      filter_remained = #{filterRemained,jdbcType=INTEGER},
      channel_capacity = #{channelCapacity,jdbcType=VARCHAR},
      is_file_exist = #{isFileExist,jdbcType=BIT},
      path_id = #{pathId,jdbcType=BIGINT},
      type = #{type,jdbcType=VARCHAR},
      read_count = #{readCount,jdbcType=INTEGER},
      send_time_mean = #{sendTimeMean,jdbcType=INTEGER},
      master_file = #{masterFile,jdbcType=VARCHAR},
      path = #{path,jdbcType=VARCHAR},
      hostname = #{hostname,jdbcType=VARCHAR},
      heartbeat_time = #{heartbeatTime,jdbcType=BIGINT},
      host_ip = #{hostIp,jdbcType=VARCHAR},
      sink_num = #{sinkNum,jdbcType=INTEGER},
      flush_time_mean = #{flushTimeMean,jdbcType=INTEGER},
      latest_file = #{latestFile,jdbcType=VARCHAR},
      filter_too_large_count = #{filterTooLargeCount,jdbcType=INTEGER},
      channel_type = #{channelType,jdbcType=VARCHAR},
      log_model_version = #{logModelVersion,jdbcType=INTEGER},
      topic = #{topic,jdbcType=VARCHAR},
      flush_count = #{flushCount,jdbcType=INTEGER},
      flush_time_max = #{flushTimeMax,jdbcType=INTEGER},
      filter_out = #{filterOut,jdbcType=INTEGER},
      related_files = #{relatedFiles,jdbcType=INTEGER},
      log_model_host_name = #{logModelHostName,jdbcType=VARCHAR},
      cluster_id = #{clusterId,jdbcType=BIGINT},
      limit_rate = #{limitRate,jdbcType=INTEGER},
      control_time_mean = #{controlTimeMean,jdbcType=BIGINT},
      limit_time = #{limitTime,jdbcType=INTEGER},
      log_mode_id = #{logModeId,jdbcType=BIGINT},
      flush_time_min = #{flushTimeMin,jdbcType=INTEGER},
      read_time_min = #{readTimeMin,jdbcType=INTEGER},
      send_time_max = #{sendTimeMax,jdbcType=INTEGER},
      dynamic_limiter = #{dynamicLimiter,jdbcType=INTEGER},
      log_path_key = #{logPathKey,jdbcType=VARCHAR},
      max_time_gap = #{maxTimeGap,jdbcType=INTEGER},
      send_byte = #{sendByte,jdbcType=INTEGER},
      send_time_min = #{sendTimeMin,jdbcType=INTEGER},
      log_time_str = #{logTimeStr,jdbcType=VARCHAR},
      control_time_max = #{controlTimeMax,jdbcType=BIGINT},
      send_count = #{sendCount,jdbcType=INTEGER},
      source_type = #{sourceType,jdbcType=VARCHAR},
      log_time = #{logTime,jdbcType=TIMESTAMP},
      flush_failed_count = #{flushFailedCount,jdbcType=INTEGER},
      channel_size = #{channelSize,jdbcType=INTEGER},
      filter_total_too_large_count = #{filterTotalTooLargeCount,jdbcType=INTEGER},
      collect_files = #{collectFiles,jdbcType=VARCHAR},
      control_time_min = #{controlTimeMin,jdbcType=BIGINT},
      read_byte = #{readByte,jdbcType=INTEGER},
      read_time_max = #{readTimeMax,jdbcType=INTEGER},
      valid_time_config = #{validTimeConfig, jdbcType=BIT},
      operator = #{operator,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      modify_time = #{modifyTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <select id="selectSome" resultMap="BaseResultMap">
    select <include refid="Base_Column_List"/> from collect_task_metric
    where heartbeat_time &gt; #{startTime} and heartbeat_time &lt;= #{endTime}
    <if test="taskId != null">
      and log_mode_id = #{taskId}
    </if>
    <if test="hostName != null and !''.equals(hostName)">
      and log_model_host_name = #{hostName}
    </if>
    <if test="pathId != null">
      and path_id = #{pathId}
    </if>
  </select>
  <resultMap id="MetricPointMap" type="com.didichuxing.datachannel.agentmanager.common.bean.vo.metrics.MetricPoint">
    <result column="heartbeat_time" property="timestamp"/>
    <result column="read_time_mean" property="value" jdbcType="INTEGER" />
    <result column="filter_remained" property="value" jdbcType="INTEGER" />
    <result column="channel_capacity" property="value" jdbcType="VARCHAR" />
    <result column="is_file_exist" property="value" jdbcType="BIT" />
    <result column="path_id" property="value" jdbcType="BIGINT" />
    <result column="type" property="value" jdbcType="VARCHAR" />
    <result column="read_count" property="value" jdbcType="INTEGER" />
    <result column="send_time_mean" property="value" jdbcType="INTEGER" />
    <result column="master_file" property="value" jdbcType="VARCHAR" />
    <result column="path" property="value" jdbcType="VARCHAR" />
    <result column="hostname" property="value" jdbcType="VARCHAR" />
    <result column="host_ip" property="value" jdbcType="VARCHAR" />
    <result column="sink_num" property="value" jdbcType="INTEGER" />
    <result column="flush_time_mean" property="value" jdbcType="INTEGER" />
    <result column="latest_file" property="value" jdbcType="VARCHAR" />
    <result column="filter_too_large_count" property="value" jdbcType="INTEGER" />
    <result column="channel_type" property="value" jdbcType="VARCHAR" />
    <result column="log_model_version" property="value" jdbcType="INTEGER" />
    <result column="topic" property="value" jdbcType="VARCHAR" />
    <result column="flush_count" property="value" jdbcType="INTEGER" />
    <result column="flush_time_max" property="value" jdbcType="INTEGER" />
    <result column="filter_out" property="value" jdbcType="INTEGER" />
    <result column="related_files" property="value" jdbcType="INTEGER" />
    <result column="log_model_host_name" property="value" jdbcType="VARCHAR" />
    <result column="cluster_id" property="value" jdbcType="BIGINT" />
    <result column="limit_rate" property="value" jdbcType="INTEGER" />
    <result column="control_time_mean" property="value" jdbcType="BIGINT" />
    <result column="limit_time" property="value" jdbcType="INTEGER" />
    <result column="log_mode_id" property="value" jdbcType="BIGINT" />
    <result column="flush_time_min" property="value" jdbcType="INTEGER" />
    <result column="read_time_min" property="value" jdbcType="INTEGER" />
    <result column="send_time_max" property="value" jdbcType="INTEGER" />
    <result column="dynamic_limiter" property="value" jdbcType="INTEGER" />
    <result column="log_path_key" property="value" jdbcType="VARCHAR" />
    <result column="max_time_gap" property="value" jdbcType="INTEGER" />
    <result column="send_byte" property="value" jdbcType="INTEGER" />
    <result column="send_time_min" property="value" jdbcType="INTEGER" />
    <result column="log_time_str" property="value" jdbcType="VARCHAR" />
    <result column="control_time_max" property="value" jdbcType="BIGINT" />
    <result column="send_count" property="value" jdbcType="INTEGER" />
    <result column="source_type" property="value" jdbcType="VARCHAR" />
    <result column="log_time" property="value" jdbcType="TIMESTAMP" />
    <result column="flush_failed_count" property="value" jdbcType="INTEGER" />
    <result column="channel_size" property="value" jdbcType="INTEGER" />
    <result column="filter_total_too_large_count" property="value" jdbcType="INTEGER" />
    <result column="collect_files" property="value" jdbcType="VARCHAR" />
    <result column="control_time_min" property="value" jdbcType="BIGINT" />
    <result column="read_byte" property="value" jdbcType="INTEGER" />
    <result column="read_time_max" property="value" jdbcType="INTEGER" />
    <result column="valid_time_config" property="value" jdbcType="BIT" />
  </resultMap>
  <select id="selectSumByHostnamePerMin" resultMap="MetricPointMap">
    select sum(${column}) ${column}, round(heartbeat_time / 60000) * 60000 heartbeat_time from collect_task_metric
    where heartbeat_time &gt; #{startTime} and heartbeat_time &lt;= #{endTime}
    and log_model_host_name = #{hostName}
    group by log_model_host_name, round(heartbeat_time / 60000) * 60000
  </select>
  <select id="selectSumByTaskIdPerMin" resultMap="MetricPointMap">
    select sum(${column}) ${column}, round(heartbeat_time / 60000) * 60000 heartbeat_time from collect_task_metric
    where heartbeat_time &gt; #{startTime} and heartbeat_time &lt;= #{endTime}
    and log_mode_id = #{taskId}
    group by log_mode_id, round(heartbeat_time / 60000) * 60000
  </select>
  <select id="selectSingleByTaskIdPerMin" resultMap="MetricPointMap">
    select ${column}, heartbeat_time from collect_task_metric
    where heartbeat_time &gt; #{startTime} and heartbeat_time &lt;= #{endTime}
    and log_mode_id = #{taskId}
  </select>
  <select id="selectSinglePerMin" resultMap="MetricPointMap">
    select ${column}, heartbeat_time from collect_task_metric
    where heartbeat_time &gt; #{startTime} and heartbeat_time &lt;= #{endTime}
    <if test="taskId != null">
      and log_mode_id = #{taskId}
    </if>
    <if test="hostName != null and !''.equals(hostName)">
      and log_model_host_name = #{hostName}
    </if>
    <if test="pathId != null">
      and path_id = #{pathId}
    </if>
  </select>
  <select id="selectFileDisorderPerMin" resultMap="MetricPointMap">
    select collect_files, heartbeat_time from collect_task_metric
    where heartbeat_time &gt; #{startTime} and heartbeat_time &lt;= #{endTime}
    <if test="taskId != null">
      and log_mode_id = #{taskId}
    </if>
    <if test="hostName != null and !''.equals(hostName)">
      and log_model_host_name = #{hostName}
    </if>
    <if test="pathId != null">
      and path_id = #{pathId}
    </if>
  </select>
  <select id="selectAvgPerMin" resultMap="MetricPointMap">
    select avg(${column}) ${column}, round(heartbeat_time / 60000) * 60000 heartbeat_time from collect_task_metric
    where heartbeat_time &gt; #{startTime} and heartbeat_time &lt;= #{endTime}
    <if test="taskId != null">
      and log_mode_id = #{taskId}
    </if>
    <if test="hostName != null and !''.equals(hostName)">
      and log_model_host_name = #{hostName}
    </if>
    <if test="pathId != null">
      and path_id = #{pathId}
    </if>
    group by round(heartbeat_time / 60000) * 60000
  </select>
  <select id="selectSumPerMin" resultMap="MetricPointMap">
    select sum(${column}) ${column}, round(heartbeat_time / 60000) * 60000 heartbeat_time from collect_task_metric
    where heartbeat_time &gt; #{startTime} and heartbeat_time &lt;= #{endTime}
    <if test="taskId != null">
      and log_mode_id = #{taskId}
    </if>
    <if test="hostName != null and !''.equals(hostName)">
      and log_model_host_name = #{hostName}
    </if>
    <if test="pathId != null">
      and path_id = #{pathId}
    </if>
    group by round(heartbeat_time / 60000) * 60000
  </select>
  <select id="selectMinPerMin" resultMap="MetricPointMap">
    select min(${column}) ${column}, round(heartbeat_time / 60000) * 60000 heartbeat_time from collect_task_metric
    where heartbeat_time &gt; #{startTime} and heartbeat_time &lt;= #{endTime}
    <if test="taskId != null">
      and log_mode_id = #{taskId}
    </if>
    <if test="hostName != null and !''.equals(hostName)">
      and log_model_host_name = #{hostName}
    </if>
    <if test="pathId != null">
      and path_id = #{pathId}
    </if>
    group by log_mode_id, round(heartbeat_time / 60000) * 60000
  </select>
  <select id="selectDelayTimePerMin" resultMap="MetricPointMap">
    select max(heartbeat_time - log_time) log_time, round(heartbeat_time / 60000) * 60000 heartbeat_time from collect_task_metric
    where heartbeat_time &gt; #{startTime} and heartbeat_time &lt;= #{endTime}
    <if test="taskId != null">
      and log_mode_id = #{taskId}
    </if>
    <if test="hostName != null and !''.equals(hostName)">
      and log_model_host_name = #{hostName}
    </if>
    <if test="pathId != null">
      and path_id = #{pathId}
    </if>
    group by log_mode_id, round(heartbeat_time / 60000) * 60000
  </select>
  <delete id="deleteBeforeTime" parameterType="java.lang.Long">
    delete from collect_task_metric
    where heartbeat_time &lt;= #{time}
  </delete>
  <select id="selectContainerCountEqualsZero" resultType="java.lang.Long">
    select count(heartbeat_time) from collect_task_metric
    where heartbeat_time &gt; #{startTime} and heartbeat_time &lt;= #{endTime}
      and log_mode_id = #{taskId} and hostname = #{hostName}
      and log_model_host_name = #{containerName}
      and ${column} = 0
  </select>
  <select id="selectContainerCountGtZero" resultType="java.lang.Long">
    select count(heartbeat_time) from collect_task_metric
    where heartbeat_time &gt; #{startTime} and heartbeat_time &lt;= #{endTime}
      and log_mode_id = #{taskId} and hostname = #{hostName}
      and log_model_host_name = #{containerName}
      and ${column} &gt; 0
  </select>
  <select id="selectSingleCountEqualsZero" resultType="java.lang.Long">
    select count(heartbeat_time) from collect_task_metric
    where heartbeat_time &gt; #{startTime} and heartbeat_time &lt;= #{endTime}
      and log_mode_id = #{taskId} and log_model_host_name = #{hostName}
      and path_id = #{pathId}
      and ${column} = 0
  </select>
  <select id="selectSingleCountGtZero" resultType="java.lang.Long">
    select count(heartbeat_time) from collect_task_metric
    where heartbeat_time &gt; #{startTime} and heartbeat_time &lt;= #{endTime}
      and log_mode_id = #{taskId} and log_model_host_name = #{hostName}
      and path_id = #{pathId}
      and ${column} &gt; 0
  </select>
  <select id="selectSingleCountLtZero" resultType="java.lang.Long">
    select count(heartbeat_time) from collect_task_metric
    where heartbeat_time &gt; #{startTime} and heartbeat_time &lt;= #{endTime}
      and log_mode_id = #{taskId} and log_model_host_name = #{hostName}
      and path_id = #{pathId}
      and ${column} &lt; 0
  </select>
  <select id="selectSingleHeartbeatCount" resultType="java.lang.Long">
    select count(heartbeat_time) from collect_task_metric
    where heartbeat_time &gt; #{startTime} and heartbeat_time &lt;= #{endTime}
      and log_mode_id = #{taskId} and log_model_host_name = #{hostName}
      and path_id = #{pathId}
  </select>
  <select id="selectHeartbeatCountByHostname" resultType="java.lang.Long">
    select count(heartbeat_time) from collect_task_metric
    where heartbeat_time &gt; #{startTime} and heartbeat_time &lt;= #{endTime}
      and log_model_host_name = #{hostName}
  </select>
  <select id="selectHeartbeatCount" resultType="java.lang.Long">
    select count(heartbeat_time) from collect_task_metric
    where heartbeat_time &gt; #{startTime} and heartbeat_time &lt;= #{endTime}
    <if test="taskId != null">
      and log_mode_id = #{taskId}
    </if>
    <if test="hostName != null and !''.equals(hostName)">
      and log_model_host_name = #{hostName}
    </if>
    <if test="pathId != null">
      and path_id = #{pathId}
    </if>
  </select>
  <select id="selectSingleCountWithTerm" resultType="java.lang.Long">
    select count(heartbeat_time) from collect_task_metric
    where heartbeat_time &gt; #{startTime} and heartbeat_time &lt;= #{endTime}
    <if test="taskId != null">
      and log_mode_id = #{taskId}
    </if>
    <if test="hostName != null and !''.equals(hostName)">
      and log_model_host_name = #{hostName}
    </if>
    <if test="pathId != null">
      and path_id = #{pathId}
    </if>
      and ${column} = #{value}
  </select>
  <select id="selectSingleSum" resultType="java.lang.Long">
    select sum(${column}) from collect_task_metric
    where heartbeat_time &gt; #{startTime} and heartbeat_time &lt;= #{endTime}
    <if test="taskId != null">
      and log_mode_id = #{taskId}
    </if>
    <if test="hostName != null and !''.equals(hostName)">
      and log_model_host_name = #{hostName}
    </if>
    <if test="pathId != null">
      and path_id = #{pathId}
    </if>
  </select>
  <select id="selectSumByHostname" resultType="java.lang.Long">
    select sum(${column}) from collect_task_metric
    where heartbeat_time &gt; #{startTime} and heartbeat_time &lt;= #{endTime}
      and log_model_host_name = #{hostName}
  </select>
  <select id="selectSingleMax" resultType="java.lang.Object">
    select max(${column}) from collect_task_metric
      where log_mode_id = #{taskId} and log_model_host_name = #{hostName}
      and path_id = #{pathId}
  </select>
  <select id="selectMaxByHostname" resultType="java.lang.Object">
    select max(${column}) from collect_task_metric
      where log_model_host_name = #{hostName}
  </select>
  <select id="selectByTask" resultMap="MetricPointMap">
    select ${column}, heartbeat_time from collect_task_metric
      where log_mode_id = #{taskId}
      and heartbeat_time &gt; #{startTime} and heartbeat_time &lt;= #{endTime}
  </select>
  <select id="selectAggregationByTask" resultMap="MetricPointMap">
    select ${function}(${column}) ${column}, round(heartbeat_time / #{step}) * #{step} heartbeat_time from collect_task_metric
      where log_mode_id = #{taskId}
      and heartbeat_time &gt; #{startTime} and heartbeat_time &lt;= #{endTime}
      group by round(heartbeat_time / #{step}) * #{step}
  </select>
  <select id="selectAggregationByHostname" resultMap="MetricPointMap">
    select ${function}(${column}) ${column}, round(heartbeat_time / #{step}) * #{step} heartbeat_time from collect_task_metric
      where hostname = #{hostname}
      and heartbeat_time &gt; #{startTime} and heartbeat_time &lt;= #{endTime}
      group by round(heartbeat_time / #{step}) * #{step}
  </select>

  <select id="selectByLogModel" resultMap="MetricPointMap">
    select ${column}, heartbeat_time from collect_task_metric
    where heartbeat_time &gt; #{startTime} and heartbeat_time &lt;= #{endTime}
    <if test="taskId != null">
      and log_mode_id = #{taskId}
    </if>
    <if test="hostName != null and !''.equals(hostName)">
      and log_model_host_name = #{hostName}
    </if>
    <if test="pathId != null">
      and path_id = #{pathId}
    </if>
    and heartbeat_time &gt; #{startTime} and heartbeat_time &lt;= #{endTime}
  </select>
  <select id="selectAggregationByLogModel" resultMap="MetricPointMap">
    select ${function}(${column}) ${column}, round(heartbeat_time / #{step}) * #{step} heartbeat_time from collect_task_metric
    where heartbeat_time &gt; #{startTime} and heartbeat_time &lt;= #{endTime}
    <if test="taskId != null">
      and log_mode_id = #{taskId}
    </if>
    <if test="hostName != null and !''.equals(hostName)">
      and log_model_host_name = #{hostName}
    </if>
    <if test="pathId != null">
      and path_id = #{pathId}
    </if>
    group by round(heartbeat_time / #{step}) * #{step}
  </select>
  <select id="selectLatest" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List"/>
    from collect_task_metric
    where log_mode_id = #{taskId}
    order by heartbeat_time desc limit 1
  </select>
  <select id="selectLatestMetrics" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List"/>
    from collect_task_metric
    where heartbeat_time &gt; #{time} - #{step} and heartbeat_time &lt;= #{time}
  </select>
  <select id="selectAggregationForAll" resultType="java.lang.Double">
    select ${function}(${column}) from collect_task_metric
    where heartbeat_time &gt; #{startTime} and heartbeat_time &lt;= #{endTime}
  </select>

  <resultMap id="DashBoardStatisticsDOResultMap" type="com.didichuxing.datachannel.agentmanager.common.bean.domain.agent.metrics.DashBoardStatisticsDO" >
    <result column="heartbeat_time" property="heartbeatTime" jdbcType="BIGINT"/>
    <result column="metric_value" property="metricValue" jdbcType="BIGINT"/>
    <result column="hostname" property="key" jdbcType="VARCHAR"/>
    <result column="log_mode_id" property="key" jdbcType="BIGINT"/>
    <result column="path_id" property="key" jdbcType="BIGINT"/>
  </resultMap>

  <select id="groupByKeyAndMinute" resultMap="DashBoardStatisticsDOResultMap">
    select ${key}, ${function}(${metric}) as metric_value, round(heartbeat_time / 60000) * 60000 as heartbeat_time
    from collect_task_metric
    where heartbeat_time &gt; #{startTime} and heartbeat_time &lt;= #{endTime}
    group by ${key}, round(heartbeat_time / 60000) * 60000
  </select>

  <select id="selectAggregationByAgent" resultMap="MetricPointMap">
    select ${function}(${column}) ${column}, round(heartbeat_time / 60000) * 60000 heartbeat_time from collect_task_metric
    where hostname = #{agentHostName}
      and heartbeat_time &gt; #{startTime} and heartbeat_time &lt;= #{endTime}
    group by round(heartbeat_time / 60000) * 60000
  </select>

  <select id="selectAggregationGroupByMinute" resultMap="MetricPointMap">
    select ${function}(${column}) ${column}, round(heartbeat_time / 60000) * 60000 heartbeat_time from collect_task_metric
    where heartbeat_time &gt; #{startTime} and heartbeat_time &lt;= #{endTime}
    group by round(heartbeat_time / 60000) * 60000
  </select>

</mapper>




